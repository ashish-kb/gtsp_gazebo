#!/usr/bin/env python
import rospy
from std_msgs.msg import String
import time
from nav_msgs.msg import Odometry
import math
from geometry_msgs.msg import (
    PoseArray,
    PoseStamped,
    Pose,
    Point,
    Twist,
    TransformStamped,
    Quaternion,
)
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal, MoveBaseActionFeedback, MoveBaseActionResult
import numpy as np
from actionlib_msgs.msg import GoalStatus
def listener():
	file = open('goals.txt', 'r')
	counter=0
	for line in file:
		print(line)
		values = line.split("\t")
		goal_x=float(values[0])
		goal_y=float(values[1])
		goal_states = ['PENDING', 'ACTIVE', 'PREEMPTED', 'SUCCEEDED', 'ABORTED', 'REJECTED','PREEMPTING', 'RECALLING', 'RECALLED','LOST']
		topicName="/robot1"
		topicName+="/move_base"
		move_base = actionlib.SimpleActionClient(topicName, MoveBaseAction)
		rospy.loginfo("Waiting for move_base action server...")
		move_base.wait_for_server(rospy.Duration(60))
		rospy.loginfo("Connected to move base server")
		rospy.loginfo("Starting Exploration")
		goal = MoveBaseGoal()
		goal.target_pose.pose.position.x = (goal_x)
		goal.target_pose.pose.position.y = (goal_y)
		goal.target_pose.pose.orientation.w = 1
		goal.target_pose.header.frame_id = '/map'
		goal.target_pose.header.stamp = rospy.Time.now()
		print("got the goal")
		print(goal)

		rospy.loginfo("Goal Set!")
        move_base.send_goal(goal)
        finished_within_time = move_base.wait_for_result(rospy.Duration(300))
        if not finished_within_time:
			move_base.cancel_goal()
			rospy.loginfo("Timed out achieving goal")
		else:
			state = move_base.get_state()
			if state == GoalStatus.SUCCEEDED:
				rospy.loginfo("Goal succeeded!")
				rospy.sleep(1.)
				rotateInPlace("robot1")
				rospy.loginfo("Done!! Move to next goal!")
			else:
				rospy.loginfo("Goal failed with error code: " + str(goal_states[state]))
				rospy.loginfo("Goal failed!! Move to next goal!")
				
	rospy.loginfo("All goals visited!")
	rospy.loginfo("Exiting!")
    
def rotateInPlace(robotName):
    print("This is to make the robot rotate in place!")
    top='/'
    top+=robotName
    top+='/cmd_vel'
    print(str(top))
    p = rospy.Publisher(top, Twist)
    twist = Twist()
    twist.linear.x = 0
    twist.linear.y = 0
    twist.linear.z = 0            
    twist.angular.x = 0
    twist.angular.y = 0  
    twist.angular.z = 0.5
    for i in range(60):
        p.publish(twist)
        rospy.sleep(0.1) 

    twist = Twist()
    rospy.loginfo("Stopping!")
    p.publish(twist)
    rospy.sleep(1.)

if __name__ == '__main__':
	rospy.init_node('multiple_goal_publisher', anonymous=True)
	listener()
